#ifndef PPU_H
#define PPU_H
#include "cartridge.h"
#include "olcPixelGameEngine.h"
#include <cstdint>
#include <memory>
#include <vector>
class Ppu {
public:
  Ppu();
  ~Ppu();

  // PPU will also be able to communicate with the CPU, so it can write and read
  // on the CPU soo we will need these functions
  uint8_t cpu_read(uint16_t adr, bool read = false);
  void cpu_write(uint16_t adr, uint8_t val);

  // of course, the PPU will also need to write and read on its own
  // addressable range
  uint8_t ppu_read(uint16_t adr, bool read = false);
  void ppu_write(uint16_t adr, uint8_t val);

private:
  // PPU also has acces to the cartridge, so we will keep a reference to it
  // it does not own it though, so it has a raw pointer
  Cartridge *card;
  uint8_t ntables[2][1024]; // vram memory for the nametables 0x2000 to 0x2FFF
  uint8_t palettes[32];

  // Graphics for PPU
  // Array NES can display
  olc::Pixel palScreen[0x40];
  // FullScreen Output
  std::unique_ptr<olc::Sprite> sprScreen;
  // Name table display
  // tells the PPU how to place the tiles from the pattern table
  std::vector<std::unique_ptr<olc::Sprite>> sprNameTable;
  // Pattern display
  // pattern table is divided into 2 parts of memory
  // first from 0000-0FFFF and second from 1000-1FFF
  // both patterns have 256 tiles (16x16)
  // EACH tile is 8x8 (kind of like a grid)  
  // 01000001
  // 11000010
 //  01000100
  // 01001000
  // 00010000
  // 00100000
  // 01000000 
  // 10000000
  // the 8x8 grid is seperated into the low and the high bit 
  // So the table above could be the low or the high bit thable for a tile
  // and each row is stored as a byte
  // so the first row could be stored as 0x41 
  // makes it easy to figure out what is what
   std::vector<std::unique_ptr<olc::Sprite>> sprPatternTable;

  // for later
  int16_t scanline = 0;
  int16_t cycle = 0;

public:
  // public interface
  void connectCard(Cartridge *c);
  void clock();

  
  // debugging functions
  olc::Sprite *getScreen() const;
  olc::Sprite &getNameTable(uint8_t i);
  olc::Sprite &getpatternTable(uint8_t i);
  bool frame_complete;
};

// Cpu configures the mapper
// to return addressed in our correct address range
// adapts the addresses from PPU AND CPU to write to correct
// address in the Cartridge
#endif
